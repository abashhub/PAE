package bizz.ucc;

import java.util.List;

import bizz.Contact;
import bizz.dto.CompanyDTO;
import bizz.dto.ContactDTO;
import bizz.dto.JEDTO;
import exception.BizzException;
import persistence.DALServices;
import persistence.dao.ContactDAO;
import persistence.dao.DAO;
import util.Util;

/**
 * This class is the implementation of ContactUCC, this implementation is meant to be used in
 * production.
 */
public class ContactUCCImpl implements ContactUCC {
  DALServices dalServices;
  DAO<ContactDTO> contactDAO;

  /**
   * Class constructor.
   * 
   * @param dalServices The interface used to operate the database. Typically used to start
   *        transactions and commit modifications.
   * @param contactDAO The contact DAO (Data Access Object) used to perform operations on the
   *        database regarding contacts.
   */
  public ContactUCCImpl(DALServices dalServices, DAO<ContactDTO> contactDAO) {
    this.dalServices = dalServices;
    this.contactDAO = contactDAO;
  }

  /**
   * {@inheritDoc}.
   */
  @Override
  public ContactDTO addContact(ContactDTO contactDTO) {
    if (Util.anyNull(contactDTO)) {
      throw new BizzException("Erreur, contact incomplet.");
    }
    ContactDTO contactReturn = null;
    ((Contact) contactDTO).checkContact();

    // Check if contact is not already in the db (email -> index_unique)
    ContactDTO c = ((ContactDAO) contactDAO).findByEmail(contactDTO);
    if (c != null && !c.getEmail().isEmpty()) {
      throw new BizzException("L'email du contact est déjà utilisé.");
    }

    // Everything is OK, we can create the contact
    dalServices.startTransaction();
    Long newId = contactDAO.create(contactDTO);
    if (newId == null) {
      // an error has occured -> rollback
      dalServices.rollback();
      throw new BizzException("Le contact n'a pas pu être ajouté.");
    } else {
      dalServices.commit();
      contactDTO.setId(newId);
      contactReturn = contactDAO.find(contactDTO);
    }
    return contactReturn;
  }

  /**
   * {@inheritDoc}.
   */
  @Override
  public List<ContactDTO> fillInfosContacts(CompanyDTO companyDTO) {
    if (Util.anyNull(companyDTO)) {
      throw new BizzException("Erreur, entreprise incomplète.");
    }
    List<ContactDTO> liste = null;
    dalServices.startTransaction();
    liste = ((ContactDAO) contactDAO).fillInfosContacts(companyDTO);
    if (liste == null) {
      dalServices.rollback();
      throw new BizzException("Erreur, aucun contact trouvé.");
    } else {
      dalServices.commit();
    }
    return liste;
  }

  /**
   * {@inheritDoc}.
   */
  @Override
  public boolean updateContact(ContactDTO contactDTO, JEDTO jeCurrent) {
    if (Util.anyNull(contactDTO, jeCurrent)) {
      throw new BizzException("Erreur, informations incomplètes.");
    }
    dalServices.startTransaction();
    if (contactDTO.getParticipation().getNumVersion() == 0
        && !contactDTO.getParticipation().isCancelled()) {
      // insert participation
      ((ContactDAO) contactDAO).insertParticipation(contactDTO, jeCurrent);
    } else if (contactDTO.getParticipation().getNumVersion() != 0
        && contactDTO.getParticipation().isCancelled()) {
      boolean succes = ((ContactDAO) contactDAO).deleteParticipation(contactDTO, jeCurrent);
      if (!succes) {
        throw new BizzException("La participation de ce contact n'a pas pu être modifiée.");
      }
    }
    Long contactId = contactDAO.update(contactDTO);
    if (contactId == null) {
      // An error has occurred -> rollback
      dalServices.rollback();
      throw new BizzException("Ce contact n'a pas pu être mis à jour.");
    } else {
      System.out.println("update effectué");
      dalServices.commit();
    }
    return true;
  }

  /**
   * {@inheritDoc}.
   */
  @Override
  public List<List<String>> getAllContactsInfoByCategory() {
    dalServices.startTransaction();
    List<List<String>> liste = ((ContactDAO) contactDAO).getAllContactsInfoByCategory();
    dalServices.commit();
    if (liste == null) {
      throw new BizzException("Erreur, impossible de charger les informations du contact.");
    }
    return liste;
  }

  /**
   * {@inheritDoc}.
   */
  @Override
  public List<ContactDTO> searchContacts(ContactDTO c) {
    if (Util.anyNull(c)) {
      throw new BizzException("Erreur, contact incomplet.");
    }
    dalServices.startTransaction();
    List<ContactDTO> toReturn = ((ContactDAO) contactDAO).searchContacts(c);
    dalServices.commit();
    return toReturn;
  }

  /**
   * {@inheritDoc}.
   */
  @Override
  public List<ContactDTO> getContactByCompany(CompanyDTO companyDTO) {
    if (Util.anyNull(companyDTO)) {
      throw new BizzException("Erreur, entreprise incomplète.");
    }
    dalServices.startTransaction();
    List<ContactDTO> toReturn = ((ContactDAO) contactDAO).findByCompany(companyDTO);
    dalServices.commit();
    return toReturn;
  }

  /**
   * {@inheritDoc}.
   */
  @Override
  public void desactivateContact(ContactDTO contact) {
    if (Util.anyNull(contact)) {
      throw new BizzException("Erreur, contact incomplet.");
    }
    dalServices.startTransaction();;
    if (!((ContactDAO) contactDAO).desactivateContact(contact)) {
      // an error has occured -> rollback
      dalServices.rollback();
      throw new BizzException("Impossible d'update l'état de ce contact.");
    } else {
      dalServices.commit();
    }
  }
}
