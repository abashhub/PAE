package persistence.dao;


import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import bizz.dto.AddressDTO;
import bizz.dto.CompanyDTO;
import bizz.dto.JEDTO;
import bizz.dto.ParticipationDTO;
import bizz.dto.UserDTO;
import bizz.factory.AddressFactory;
import bizz.factory.CompanyFactory;
import bizz.factory.ParticipationFactory;
import bizz.factory.UserFactory;
import persistence.DALBackendServices;
import persistence.DALServices;

/**
 * This class is the implementation of CompanyDAO used in production. Since CompanyDAO extends DAO,
 * this implementation contains the basic CRUD as well.
 */
public class CompanyDAOImpl implements CompanyDAO {

  private DALServices dalServices;
  private CompanyFactory companyFactory;
  private UserFactory userFactory;
  private DAO<UserDTO> userDAO;
  private ParticipationFactory participationFactory;
  private AddressFactory addressFactory;

  private static final String SQL_SELECT_ALL_FROM_JE =
      "SELECT e.id_entreprise,e.createur, e.nom, e.date_premier_contact, e.num_version,"
          + " pe.etat, pe.annulee, pe.num_version_participation, af.rue, af.numero, af.boite, c.code_postal, c.nomCommune, af.id_adresse_facturation, je.date_journee  "
          + "FROM PAE.entreprises e, PAE.participations_entreprises pe,PAE.communes c , PAE.adresses_facturation af, PAE.journees_entreprises je  "
          + "WHERE e.id_entreprise = pe.entreprise and e.adresse_facturation = af.id_adresse_facturation and af.commune=c.code_postal and je.id_journee_entreprises=pe.journee_entreprises and pe.journee_entreprises = ?";
  private static final String SQL_SELECT_ALL_NOT_INVITED_IN_JE =
      "SELECT DISTINCT e.id_entreprise,e.createur, e.nom, e.date_premier_contact, e.num_version, af.rue, af.numero, af.boite, c.code_postal, c.nomCommune, af.id_adresse_facturation  "
          + "FROM PAE.entreprises e, PAE.communes c , PAE.adresses_facturation af "
          + "WHERE e.adresse_facturation = af.id_adresse_facturation and af.commune=c.code_postal and not exists ( select pe.journee_entreprises = ? from PAE.participations_entreprises pe where e.id_entreprise = pe.entreprise AND pe.journee_entreprises = ?)";
  private static final String SQL_INSERT_COMPANY =
      "INSERT INTO PAE.entreprises VALUES (DEFAULT, ?, ?, ?, ?, ?) RETURNING id_entreprise";
  private static final String SQL_SELECT_BY_ID =
      "SELECT e.id_entreprise,e.createur, e.nom, e.date_premier_contact, e.num_version, af.rue, af.numero, af.boite, c.code_postal, c.nomCommune, af.id_adresse_facturation  "
          + "FROM PAE.entreprises e, PAE.communes c , PAE.adresses_facturation af  "
          + "WHERE e.adresse_facturation = af.id_adresse_facturation and af.commune = c.code_postal and e.id_entreprise = ?";
  private static final String SQL_INSERT_LOCALITY =
      "INSERT INTO PAE.communes VALUES (?, ?) RETURNING code_postal";
  private static final String SQL_SELECT_LOCALITY =
      "SELECT * FROM PAE.communes c WHERE c.code_postal = ?";
  private static final String SQL_INSERT_ADDRESS =
      "INSERT INTO PAE.adresses_facturation VALUES (DEFAULT, ?, ?, ?, ?) RETURNING id_adresse_facturation";
  private static final String SQL_SELECT_ADDRESS =
      "SELECT * FROM PAE.adresses_facturation a WHERE a.rue = ? AND a.numero = ? AND a.boite = ? AND a.commune = ?";

  private static final String SQL_SELECT_AVIABLE_FOR_JE =
      "select * from PAE.entreprises e, PAE.participations_entreprises p, PAE.journees_entreprises j "
          + " where e.id_entreprise = p.entreprise AND j.id_journee_entreprises = p.journee_entreprises AND p.etat = 'payee' and DATE(j.date_journee) between ? and ?";

  private static final String SQL_SELECT_NEW_FOR_JE =
      "SELECT * FROM PAE.entreprises e WHERE extract(year from e.date_premier_contact) = extract(year from NOW()) AND e.id_entreprise NOT IN (SELECT pe.entreprise FROM PAE.participations_entreprises pe)" ;

  private static final String SQL_INSERT_ADD_PARTICIPATION =
      "INSERT INTO PAE.participations_entreprises VALUES (?,?,?,?,false) RETURNING entreprise";

  private static final String SQL_UPDATE_COMPANY =
      "UPDATE PAE.entreprises SET nom = ?, adresse_facturation = ?, num_version = ? WHERE num_version < ? AND id_entreprise = ? RETURNING id_entreprise";

  private static final String SQL_SELECT_ALL_NAMES = "SELECT DISTINCT e.nom FROM PAE.entreprises e";
  private static final String SQL_SELECT_ALL_POSTAL_CODE =
      "SELECT DISTINCT c.code_postal FROM PAE.communes c";
  private static final String SQL_SELECT_ALL_LOCALITIES =
      "SELECT DISTINCT c.nomCommune FROM PAE.communes c";
  private static final String SQL_SELECT_ALL_STREETS =
      "SELECT DISTINCT af.rue FROM PAE.adresses_facturation af";
  private static final String SQL_SEARCH_COMPANIES_WITH_CODE_POSTAL =
      "SELECT * FROM PAE.adresses_facturation a, PAE.communes c, PAE.entreprises e WHERE a.rue LIKE ?"
          + "AND a.commune = c.code_postal AND e.nom LIKE ? AND c.nomCommune LIKE ? AND a.id_adresse_facturation=id_entreprise  AND c.code_postal = ?";
  private static final String SQL_SEARCH_COMPANIES =
      "SELECT * FROM PAE.adresses_facturation a, PAE.communes c, PAE.entreprises e WHERE a.rue LIKE ?"
          + "AND a.commune = c.code_postal AND e.nom LIKE ? AND c.nomCommune LIKE ? AND a.id_adresse_facturation=id_entreprise";
  private static final String SQL_UPDATE_PARTICIPATION =
      "UPDATE PAE.participations_entreprises SET etat = ?, num_version_participation = ? WHERE num_version_participation < ? AND entreprise = ? AND journee_entreprises = ? AND annulee = false RETURNING etat";

  private static final String SQL_UPDATE_CANCEL_PARTICIPATION =
      "UPDATE PAE.participations_entreprises SET annulee = true, num_version_participation = ? WHERE num_version_participation < ? AND entreprise = ? AND journee_entreprises = ? AND annulee = false RETURNING etat";
  private static final String SQL_SELECT_ALL_TO_CONTACT_FROM_JE =
      "SELECT e.id_entreprise,e.createur, e.nom, e.date_premier_contact, e.num_version,"
          + " pe.etat, pe.annulee, pe.num_version_participation, af.rue, af.numero, af.boite, c.code_postal, c.nomCommune, af.id_adresse_facturation, je.date_journee  "
          + "FROM PAE.entreprises e, PAE.participations_entreprises pe,PAE.communes c , PAE.adresses_facturation af, PAE.journees_entreprises je  "
          + "WHERE e.id_entreprise = pe.entreprise and e.adresse_facturation = af.id_adresse_facturation and af.commune=c.code_postal and je.id_journee_entreprises=pe.journee_entreprises and pe.journee_entreprises = ? and pe.etat = 'invitee'";

  private static final String SQL_SELECT_ALL_COMPANIES = "SELECT * FROM PAE.entreprises";

  /**
   * This class is the constructor, it is ment to be used in the main.class to build the
   * application.
   * 
   * @param dalServices
   * @param companyFactory
   * @param userFactory
   * @param userDAO2
   * @param participationFactory
   */
  public CompanyDAOImpl(DALServices dalServices, CompanyFactory companyFactory,
      UserFactory userFactory, DAO<UserDTO> userDAO2, ParticipationFactory participationFactory,
      AddressFactory adressFactory) {
    this.dalServices = dalServices;
    this.companyFactory = companyFactory;
    this.userFactory = userFactory;
    this.userDAO = userDAO2;
    this.participationFactory = participationFactory;
    this.addressFactory = adressFactory;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public CompanyDTO find(CompanyDTO company) {
    CompanyDTO companyReturn = null;
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_SELECT_BY_ID);
      ps.setLong(1, company.getCompanyId());
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        companyReturn = buildCompanyWithoutParticipation(rs);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return companyReturn;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Long create(CompanyDTO company) {
    Long insertedId = null;
    // check if locality already in the sys
    Long localityId = company.getAdresseFacturation().getPostCode();
    if (!findLocality(localityId)) {
      // sinon le crÃ©er !
      localityId = createLocality(company.getAdresseFacturation().getLocality(),
          company.getAdresseFacturation().getPostCode());
    }
    // check if address is already in the sys
    int addressId = -1;
    AddressDTO address = findAddress(company.getAdresseFacturation());
    if (address == null) {
      addressId = createAddress(company.getAdresseFacturation());
    } else {
      addressId = address.getIdAdressFacturation();
    }
    // get user from db
    UserDTO user = ((UserDAO) this.userDAO).findByLogin(company.getCreater());

    // all needed references are now in the sys-> add company
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_INSERT_COMPANY);
      ps.setInt(1, addressId);
      ps.setInt(2, user.getUserID().intValue());
      ps.setString(3, company.getName());
      ps.setDate(4, Date.valueOf(LocalDate.now()));
      // num_version when created == 0
      ps.setInt(5, 0);
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        insertedId = rs.getLong(1);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return insertedId;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Long update(CompanyDTO companyDto) {
    // check if address has changed if so, then create a new one
    AddressDTO currentAddress = null;
    Long insertedId = null;
    Long insertadAddressId = null;
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_SELECT_ADDRESS);
      ps.setString(1, companyDto.getAdresseFacturation().getStreet());
      ps.setString(2, companyDto.getAdresseFacturation().getNumber());
      ps.setString(3, companyDto.getAdresseFacturation().getBox());
      ps.setLong(4, companyDto.getAdresseFacturation().getPostCode());
      System.out.println(companyDto.getAdresseFacturation().getStreet()
          + companyDto.getAdresseFacturation().getNumber()
          + companyDto.getAdresseFacturation().getBox()
          + companyDto.getAdresseFacturation().getPostCode());
      ResultSet rs = ps.executeQuery();
      if (rs.next()) {
        System.out.println("adresse identique");
        currentAddress = buildAddress(rs);
        rs.close();
        // then address didn't change and can update name
        ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_UPDATE_COMPANY);
        ps.setString(1, companyDto.getName());
        ps.setInt(2, currentAddress.getIdAdressFacturation());
        ps.setInt(3, companyDto.getNumVersion() + 1);
        ps.setInt(4, companyDto.getNumVersion() + 1);
        ps.setLong(5, companyDto.getCompanyId());
        rs = ps.executeQuery();
        System.out.println(companyDto.getNumVersion() + 1);
        System.out.println(companyDto.getName() + "c" + currentAddress.getIdAdressFacturation()
            + " " + companyDto.getCompanyId());
        if (rs.next()) {
          System.out.println("a fait l'update ");
          insertedId = rs.getLong(1);
          rs.close();
        }
      } else {
        System.out.println("adresse diffÃ©rente");
        // address changed, need to create a new one
        ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_INSERT_ADDRESS);
        ps.setString(1, companyDto.getAdresseFacturation().getStreet());
        ps.setString(2, companyDto.getAdresseFacturation().getNumber());
        ps.setString(3, companyDto.getAdresseFacturation().getBox());
        ps.setLong(4, companyDto.getAdresseFacturation().getPostCode());
        rs = ps.executeQuery();
        if (rs.next()) {
          insertadAddressId = rs.getLong(1);
          rs.close();
          // now update the company
          ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_UPDATE_COMPANY);
          ps.setString(1, companyDto.getName());
          ps.setLong(2, insertadAddressId);
          ps.setInt(3, companyDto.getNumVersion() + 1);
          ps.setInt(4, companyDto.getNumVersion() + 1);
          ps.setLong(5, companyDto.getCompanyId());
          rs = ps.executeQuery();
          if (rs.next()) {
            insertedId = rs.getLong(1);
            rs.close();
          }
        }
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return insertedId;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void delete(CompanyDTO obj) {
    // TODO Auto-generated method stub
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<CompanyDTO> findAllInvitedInJE(JEDTO je) {
    List<CompanyDTO> list = new ArrayList<>();
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_SELECT_ALL_FROM_JE);
      ps.setLong(1, je.getId());
      ResultSet rs = ps.executeQuery();
      CompanyDTO co;
      while (rs.next()) {
        co = this.buildCompany(rs);
        list.add(co);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return list;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<CompanyDTO> findAllNotInvitedInJE(JEDTO je) {
    List<CompanyDTO> list = new ArrayList<>();
    if (je == null)
      return list;
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices)
          .prepareStatement(SQL_SELECT_ALL_NOT_INVITED_IN_JE);
      ps.setLong(1, je.getId());
      ps.setLong(2, je.getId());
      ResultSet rs = ps.executeQuery();
      CompanyDTO co;
      while (rs.next()) {
        co = this.buildCompanyWithoutParticipation(rs);
        list.add(co);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return list;
  }

  /**
   * This method returns an object CompanyDTO using the informations in the ResultSet given as
   * parameter.
   * 
   * @param rs
   * @return CompanyDTO
   * @throws SQLException
   */
  private CompanyDTO buildCompany(ResultSet rs) throws SQLException {
    // creation of the participation
    ParticipationDTO pa = this.participationFactory.create();
    pa.setCancelled(rs.getBoolean("annulee"));
    pa.setState(rs.getString("etat"));
    System.out.println("num version " + rs.getInt("num_version_participation"));
    pa.setNumVersion(rs.getInt("num_version_participation"));

    // creation of the company object
    CompanyDTO co = buildCompanyWithoutParticipation(rs);
    co.getParticipations().add(pa);

    return co;
  }

  /**
   * This method returns an object CompanyDTO using the informations in the ResultSet given as
   * parameter.
   * 
   * @param rs
   * @return CompanyDTO
   * @throws SQLException
   */
  private CompanyDTO buildCompanyWithoutParticipation(ResultSet rs) throws SQLException {
    // creation of the adress object
    AddressDTO adr = buildAddressWithLocality(rs);

    // creation of the creator's user object
    UserDTO createur = this.userFactory.createUser();
    createur.setUserID(rs.getLong("createur"));
    createur = this.userDAO.find(createur);

    // creation of the company object
    CompanyDTO co = buildCompanyWithNameAndID(rs);
    co.setAdresseFacturation(adr);
    co.setCreater(createur);
    co.setDateFirstContact(rs.getDate("date_premier_contact"));
    co.setCompanyId(rs.getLong("id_entreprise"));
    co.setName(rs.getString("nom"));
    co.setNumVersion(rs.getInt("num_version"));

    return co;
  }

  private CompanyDTO buildCompanyWithNameAndID(ResultSet rs) throws SQLException {
    CompanyDTO company = companyFactory.createCompany();
    company.setCompanyId(rs.getLong("id_entreprise"));
    company.setName(rs.getString("nom"));
    company.setNumVersion(rs.getInt("num_version"));
    return company;
  }

  private Long createLocality(String locality, Long postCode) {
    Long insertedId = null;
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_INSERT_LOCALITY);
      ps.setLong(1, postCode);
      ps.setString(2, locality);
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        insertedId = rs.getLong(1);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return insertedId;
  }

  private boolean findLocality(Long postCode) {
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_SELECT_LOCALITY);
      ps.setLong(1, postCode);
      ResultSet rs = ps.executeQuery();
      if (rs.next()) {
        rs.close();
        return true;
      }
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return false;
  }

  private int createAddress(AddressDTO addressDTO) {
    int insertedId = 0;
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_INSERT_ADDRESS);
      ps.setString(1, addressDTO.getStreet());
      ps.setString(2, addressDTO.getNumber());
      ps.setString(3, addressDTO.getBox());
      ps.setLong(4, addressDTO.getPostCode());
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        insertedId = rs.getInt(1);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return insertedId;
  }

  private AddressDTO findAddress(AddressDTO addressDTO) {
    AddressDTO address = null;
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_SELECT_ADDRESS);
      ps.setString(1, addressDTO.getStreet());
      ps.setString(2, addressDTO.getNumber());
      ps.setString(3, addressDTO.getBox());
      ps.setLong(4, addressDTO.getPostCode());
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        address = this.buildAddress(rs);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return address;
  }

  private AddressDTO buildAddressWithLocality(ResultSet rs) throws SQLException {
    AddressDTO adr = this.addressFactory.createAdress();
    adr.setLocality(rs.getString("nomCommune"));
    adr.setBox(rs.getString("boite"));
    adr.setNumber(rs.getString("numero"));
    adr.setStreet(rs.getString("rue"));
    adr.setIdAdressFacturation(rs.getInt("id_adresse_facturation"));
    adr.setPostCode(rs.getLong("code_postal"));
    return adr;
  }

  private AddressDTO buildAddress(ResultSet rs) throws SQLException {
    AddressDTO adr = this.addressFactory.createAdress();
    adr.setLocality(rs.getString("commune"));
    adr.setBox(rs.getString("boite"));
    adr.setNumber(rs.getString("numero"));
    adr.setStreet(rs.getString("rue"));
    adr.setIdAdressFacturation(rs.getInt("id_adresse_facturation"));
    adr.setPostCode(rs.getLong("code_postal"));
    return adr;
  }

  @Override
  public List<CompanyDTO> getAllCompaniesAviableForJe(JEDTO jeDto) {
    List<CompanyDTO> listeReturn = new ArrayList<>();
    PreparedStatement ps;
    java.util.Date dateAnterieur = new Date(jeDto.getDateJournee().getTime());
    dateAnterieur.setYear(dateAnterieur.getYear() - 4);

    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_SELECT_AVIABLE_FOR_JE);
      ps.setDate(1, new java.sql.Date(dateAnterieur.getTime()));
      ps.setDate(2, new java.sql.Date(jeDto.getDateJournee().getTime()));
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        CompanyDTO company = buildCompanyWithNameAndID(rs);
        listeReturn.add(company);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return listeReturn;
  }

  @Override
  public List<CompanyDTO> getNewCompaniesAviableForJe() {
    List<CompanyDTO> listeReturn = new ArrayList<>();
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_SELECT_NEW_FOR_JE);
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        CompanyDTO company = buildCompanyWithNameAndID(rs);
        listeReturn.add(company);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return listeReturn;
  }

  @Override
  public boolean inviteCompany(CompanyDTO companyDto, JEDTO jeCourrante) {
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_INSERT_ADD_PARTICIPATION);
      ps.setLong(1, jeCourrante.getId());
      ps.setLong(2, companyDto.getCompanyId());
      ps.setString(3, "invitee");
      ps.setInt(4, 0);
      ResultSet rs = ps.executeQuery();
      if (rs.next()) {
        System.out.println("DAO " + rs.getInt("entreprise"));
        rs.close();
        return true;
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return false;
  }

  @Override
  public List<List<String>> getAllCompaniesInfoByCategory() {
    List<List<String>> liste = new ArrayList<>();
    try {
      PreparedStatement ps;
      addToList(liste, SQL_SELECT_ALL_NAMES, "nom");
      addToList(liste, SQL_SELECT_ALL_POSTAL_CODE, "code_postal");
      addToList(liste, SQL_SELECT_ALL_LOCALITIES, "nomCommune");
      addToList(liste, SQL_SELECT_ALL_STREETS, "rue");
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return liste;
  }

  private void addToList(List<List<String>> liste, String statement, String column)
      throws SQLException {
    ArrayList<String> listeTemp = new ArrayList<String>();
    PreparedStatement ps;
    ps = ((DALBackendServices) this.dalServices).prepareStatement(statement);
    ResultSet rs = ps.executeQuery();
    while (rs.next()) {
      listeTemp.add(rs.getString(column));
    }
    liste.add(listeTemp);
  }

  @Override
  public List<CompanyDTO> searchCompanies(CompanyDTO co) {
    PreparedStatement ps;
    List<CompanyDTO> list = new ArrayList<>();
    try {
      if (co.getAdresseFacturation().getPostCode() != null) {
        ps = ((DALBackendServices) this.dalServices)
            .prepareStatement(SQL_SEARCH_COMPANIES_WITH_CODE_POSTAL);
        ps.setLong(4, co.getAdresseFacturation().getPostCode());
      } else {
        ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_SEARCH_COMPANIES);
      }
      ps.setString(1, '%' + co.getAdresseFacturation().getStreet());
      ps.setString(2, '%' + co.getName());
      ps.setString(3, '%' + co.getAdresseFacturation().getLocality());
      ResultSet rs = ps.executeQuery();

      while (rs.next()) {
        co = this.buildCompanyWithoutParticipation(rs);
        list.add(co);
      }
      rs.close();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return list;
  }

  @Override
  public CompanyDTO changeState(CompanyDTO companyDto, JEDTO jeCourante) {
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_UPDATE_PARTICIPATION);
      ps.setString(1, companyDto.getParticipations().get(0).getState());
      ps.setInt(2, companyDto.getParticipations().get(0).getNumVersion() + 1);
      ps.setInt(3, companyDto.getParticipations().get(0).getNumVersion() + 1);
      ps.setLong(4, companyDto.getCompanyId());
      ps.setLong(5, jeCourante.getId());
      ResultSet rs = ps.executeQuery();
      if (rs.next()) {
        System.out.println("etat " + rs.getString("etat"));
        companyDto.setNumVersion(companyDto.getNumVersion() + 1);
        return companyDto;
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return null;
  }

  @Override
  public CompanyDTO cancelState(CompanyDTO companyDto, JEDTO jeCourante) {
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices)
          .prepareStatement(SQL_UPDATE_CANCEL_PARTICIPATION);
      ps.setInt(1, companyDto.getParticipations().get(0).getNumVersion() + 1);
      ps.setInt(2, companyDto.getParticipations().get(0).getNumVersion() + 1);
      ps.setLong(3, companyDto.getCompanyId());
      ps.setLong(4, jeCourante.getId());
      ResultSet rs = ps.executeQuery();
      if (rs.next()) {
        System.out.println("etat apres annulation " + rs.getString("etat"));
        companyDto.setNumVersion(companyDto.getNumVersion() + 1);
        return companyDto;
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return null;
  }

  @Override
  public List<CompanyDTO> getAllToContactForJE(JEDTO je) {
    List<CompanyDTO> list = new ArrayList<>();
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices)
          .prepareStatement(SQL_SELECT_ALL_TO_CONTACT_FROM_JE);
      ps.setLong(1, je.getId());
      ResultSet rs = ps.executeQuery();
      CompanyDTO co;
      while (rs.next()) {
        co = this.buildCompany(rs);
        list.add(co);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return list;
  }

  @Override
  public List<CompanyDTO> getAllCompanies() {
    List<CompanyDTO> list = new ArrayList<>();
    PreparedStatement ps;
    try {
      ps = ((DALBackendServices) this.dalServices).prepareStatement(SQL_SELECT_ALL_COMPANIES);
      ResultSet rs = ps.executeQuery();
      CompanyDTO co;
      while (rs.next()) {
        co = this.buildCompanyWithNameAndID(rs);
        list.add(co);
      }
      rs.close();
    } catch (SQLException exc) {
      // TODO Auto-generated catch block
      exc.printStackTrace();
    }
    return list;
  }
}
